//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace IO.Fyno.Callback {

	// Metadata.xml XPath class reference: path="/api/package[@name='io.fyno.callback']/class[@name='FynoCallback']"
	[global::Android.Runtime.Register ("io/fyno/callback/FynoCallback", DoNotGenerateAcw=true)]
	public sealed partial class FynoCallback : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("io/fyno/callback/FynoCallback", typeof (FynoCallback));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		internal FynoCallback (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='io.fyno.callback']/class[@name='FynoCallback']/constructor[@name='FynoCallback' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe FynoCallback () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='io.fyno.callback']/class[@name='FynoCallback']/method[@name='updateStatus' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='io.fyno.callback.models.MessageStatus'] and parameter[3][@type='org.json.JSONObject']]"
		[Register ("updateStatus", "(Ljava/lang/String;Lio/fyno/callback/models/MessageStatus;Lorg/json/JSONObject;)V", "")]
		public unsafe void UpdateStatus (string callback_url, global::IO.Fyno.Callback.Models.MessageStatus status, global::Org.Json.JSONObject action)
		{
			const string __id = "updateStatus.(Ljava/lang/String;Lio/fyno/callback/models/MessageStatus;Lorg/json/JSONObject;)V";
			IntPtr native_callback_url = JNIEnv.NewString ((string)callback_url);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_callback_url);
				__args [1] = new JniArgumentValue ((status == null) ? IntPtr.Zero : ((global::Java.Lang.Object) status).Handle);
				__args [2] = new JniArgumentValue ((action == null) ? IntPtr.Zero : ((global::Java.Lang.Object) action).Handle);
				_members.InstanceMethods.InvokeNonvirtualVoidMethod (__id, this, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_callback_url);
				global::System.GC.KeepAlive (status);
				global::System.GC.KeepAlive (action);
			}
		}

	}
}
